---
description: current design docs for current project but open for modification in the future
globs: 
---
# Design Document: Kwill - Core Functionality MVP (2025-02-08)

This document outlines the design for the core functionality of the Kwill MVP.

## 1. Overall Architecture (MVP)

+----------------------+      +-----------------------+      +------------------------+
|   Frontend (Client)  | <--> |      Backend (API)    | <--> | Integrations & LLM APIs|
|  (Next.js 15,        |      |  (tRPC, Next.js API   |      | (Recall.ai, Google     |
|   shadcn/ui,         |      |   Routes, Drizzle ORM,|      |  Sheets API, LLM tools)|
|   Next.js AI SDK)    |      |   Neon Postgres)      |      |                        |
+----------------------+      +-----------------------+      +------------------------+
         ^                             ^                                  ^
         | User Interaction            | Tool Invocation & Data           | AI Processing & Data Sources
         |                             | Orchestration, Streaming         |
+----------------------------------------------------------------------------------------------+
|                                 Data Storage (Neon Postgres)                                   |
|                      (Spreadsheets, Meetings, Chat History, Logs)                              |
+----------------------------------------------------------------------------------------------+

## 2. Detailed Components

### Unified Chat Endpoint
- **API Route:**  
  A single `/api/chat` endpoint (see src/app/api/chat/route.ts) is used for:
  - Regular chat messages.
  - Tool calls (e.g., `getSpreadsheetURL` for linking Google Sheets, `getMeetingURL` to process Zoom links).
- **Streaming & Tool Handling:**  
  Supports asynchronous streaming responses (up to 30 seconds) and includes tool calls such as:
  - getSpreadsheetURL for linking Google Sheets.
  - getMeetingURL to process Zoom links.
- **Error Handling:**  
  Each tool call is wrapped with robust error handling that logs errors and returns meaningful feedback.

### Frontend (Next.js 15, Next.js AI SDK)
- Uses React Server Components when possible and if necessary.
- Integrates with the unified chat endpoint to stream responses and manage contextual state.
- Implements best practices for performance (e.g., Suspense and minimal client-side state).

### Backend (tRPC, Drizzle ORM)
- All API procedures follow strict type-safety guidelines using TypeScript.
- Database operations are performed via Drizzle ORM; queries and mutations are defined to respect modularity and error prevention.
- API endpoints are structured around tRPC routers which ensure consistency across service boundaries.

### LLM Integration & Prompt Engineering
- **Models:**  
  Primarily uses deepseekChat for meeting insight generation, but will be using and experimenting with other LLM APIs.
- **Prompts:**  
  System prompts (defined in src/lib/ai/prompts.ts) guide the LLM to extract key insights, ensuring:
  - Raw transcripts are never exposed.
  - Data is transformed into structured insights (JSON output).
  
### Data Security & Authentication
- Encryption is maintained using AES-256.
- Clerk provides simplified authentication with limited scopes for Google Sheets.

## 3. Implementation Steps (Concise)

1. **Authentication:**  
   Integrate Clerk for user authentication.
2. **Database Integration:**  
   Update and maintain schemas using Drizzle ORM.
3. **Chat Interface:**  
   Develop UI components that communicate via the unified `/api/chat` endpoint.
4. **Tool Integration:**  
   Implement and test tool calls (e.g., getSpreadsheetURL) with robust error logging.
5. **LLM & Prompt Handling:**  
   Fine-tune system and analysis prompts and integrate with deepseekChat.
6. **Streaming & Error Handling:**  
   Ensure asynchronous processing and comprehensive error catching in all API endpoints.